[

# CODE-RADE libsvm Example RBF - run analysis based on input parameters

  Type = "Job";
  JobType = "Normal";
  CPUNumber = 4;
  SMPGranularity = 4;
  WholeNodes=true;

# Command to execute on the worker node
# In this case, it is a script provided by us, which has to be included in the
# Input Sandbox (see below)

  Executable = "run_libsvm_rbf-parallel.sh";

#  The script might take some arguments - these are passed via numbered position.:
  Arguments = "fastrepo '2K' 1 1 1 1";

# Standard output (Would have been displayed to the screen output)

  StdOutput = "rbf.out";

# Standard errors - we merge this with stdout

  StdError = "rbf.out";

# Files to save after a jobrun (logfiles, outputfiles, etc.)

OutputSandbox = {"rbf.out"};

InputSandbox = {"run_libsvm_rbf-parallel.sh",
                "grid-parallel.py",
                "text_normalization.pl"
               };

#  See http://doc.grid.surfsara.nl/en/latest/Pages/Practices/data_replication.html?highlight=inputdata#data-requirements
DataRequirements = {
                     [
                       InputData = {"lfn:/grid/sagrid/nwu-hlt/NCHLT/NCHLT_2K.tar.gz"};
                       DataCatalogType = "DLI";
                       DataCatalog = "http://lfc.magrid.ma:8085";
                      ]
                    };
DataAccessProtocol = {"gsiftp"};
DataAccessProtocol = "gsiftp";

# Number of times to resubmit job, if first submit fails from WMS

RetryCount = 2;

# We need mpi-start to be available.
Requirements = Member("MPI-START", other.GlueHostApplicationSoftwareRunTimeEnvironment)
        && Member("MPICH2", other.GlueHostApplicationSoftwareRunTimeEnvironment)
        && (other.GlueHostArchitecturePlatformType == "x86_64");
# Number of times to resubmit the job, if the first submit fails from the local queue

ShallowRetryCount = 0;
]
